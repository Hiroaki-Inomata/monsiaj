<?xml version="1.0" encoding="us-ascii"?>
<project name="panda-client" default="dist" basedir=".">

    <!-- properties -->

    <property name="src.dir"             value="src"/>
    <property name="build.dir"           value="bin"/>
    <property name="tmp.dir"             value="tmp"/>
    <property name="doc.dir"             value="doc"/>
    <property name="dist.dir"            value="dist"/>
    <property name="resources.dir"       value="resources"/>
    <property name="libs.dir"            value="libs"/>
    <property name="report.dir"          value="report"/>

    <property name="webstart.url"        value="http://localhost/java-client/"/>
    <property name="webstart.vendor"     value="NaCl"/>

    <property name="macosx.app.name"     value="JMAReceipt"/>
    <property name="macosx.app.dir"      value="${macosx.app.name}.app"/>
    <property name="macosx.app.stub"     value="JMAReceipt"/>

    <path id="project.class.path">
        <pathelement path="${build.dir}"/>
        <fileset dir="libs">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- targets -->

    <target name="prepare">
        <delete includeEmptyDirs="true">
            <fileset dir="." defaultexcludes="no">
                <include name="${build.dir}/**"/>
            </fileset>
        </delete>
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="${tmp.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${report.dir}"/>
    </target>

    <target name="set-version" depends="prepare" unless="version">
        <property name="version" value="${DSTAMP}"/>
    </target>

    <target name="set-javac-options" depends="set-javac-debug,set-javac-debuglevel">
        <echo message="Javac Debug = ${javac.debug}"/>
        <echo message="Javac Debug Level = ${javac.debuglevel}"/>
    </target>

    <target name="set-javac-debug">
        <property name="javac.debug" value="yes"/>
    </target>

    <target name="set-javac-debuglevel">
        <property name="javac.debuglevel" value="lines,vars,source"/>
    </target>


    <target name="compile" depends="prepare,set-javac-options,set-version">
        <javac srcdir="${src.dir}" destdir="${build.dir}" source="1.7"
               target="1.7" encoding="utf-8"
               debug="${javac.debug}" debuglevel="${javac.debuglevel}"
               includeantruntime="false"
        >
            <compilerarg value="-Xlint:deprecation"/>                   
            <compilerarg value="-Xlint:unchecked"/>
            <include name="**/*.java"/>
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="copy-files" depends="prepare">
        <filter token="version" value="${version}"/>       
        <copy todir="${build.dir}" filtering="true">
            <fileset dir="${src.dir}">
                <include name="**/*.properties"/>
            </fileset>
            <fileset dir="${resources.dir}">
                <include name="*.properties"/>
                <include name="*.xml"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}" >
            <fileset dir="${src.dir}">
                <include name="**/*.jpg"/>
                <include name="**/*.png"/>
                <include name="org/montsuqi/tools/*.xml"/>
            </fileset>
            <fileset dir="${resources.dir}">
                <include name="**/*.jpg"/>
                <include name="**/*.png"/>
            </fileset>
            <fileset dir="${resources.dir}/themes">
                <include name="*.theme"/>
            </fileset>
            <fileset dir=".">
                <include name="README.txt"/>
                <include name="HOWTOBUILD.txt"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}/com/sun/pdfview/font/res/cmap">
            <fileset dir="${resources.dir}/cmaps">
                <include name="*"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}" >
            <fileset dir="${libs.dir}">         
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy file="${build.dir}/README.txt" tofile="${build.dir}/README.windows.txt"/>
        <copy file="${build.dir}/HOWTOBUILD.txt" tofile="${build.dir}/HOWTOBUILD.windows.txt"/>        
        <copy file="${build.dir}/README.txt" tofile="${build.dir}/README.mac.txt"/>
        <copy file="${build.dir}/HOWTOBUILD.txt" tofile="${build.dir}/HOWTOBUILD.mac.txt"/>
        <fixcrlf srcDir="${build.dir}" includes="*.windows.txt" eol="crlf" encoding="UTF-8" outputencoding="UTF-8"/>
        <fixcrlf srcDir="${build.dir}" includes="*.mac.txt" eol="mac" encoding="UTF-8" outputencoding="MS932"/>
        <native2ascii src="${resources.dir}" dest="${build.dir}" includes="*.jnlp" encoding="UTF-8"/>
        <native2ascii src="${resources.dir}" dest="${build.dir}" includes="*.mf" encoding="UTF-8"/>
        <filter token="webstarturl" value="${webstart.url}"/>
        <filter token="webstartvendor" value="${webstart.vendor}"/>
        <copy todir="${tmp.dir}" filtering="true">
            <fileset dir="${build.dir}">
                <include name="*.jnlp"/>
            </fileset>
        </copy>
        <delete>
            <fileset dir="${build.dir}">
                <include name="*.jnlp"/>
            </fileset>
        </delete>
        <native2ascii src="${tmp.dir}" dest="${build.dir}" includes="*.jnlp" encoding="UTF-8" reverse="true"/>        
        <copy todir="${tmp.dir}" filtering="true">
            <fileset dir="${build.dir}">
                <include name="*.mf"/>
            </fileset>
        </copy>
        <delete>
            <fileset dir="${build.dir}">
                <include name="*.mf"/>
            </fileset>
        </delete>
        <native2ascii src="${tmp.dir}" dest="${build.dir}" includes="*.mf" encoding="UTF-8" reverse="true"/>
    </target>

    <target name="dist" description="Build files to be distributed." depends="dist-bin,dist-loader,dist-src"/>

    <target name="dist-bin" depends="create-jars,copy-files,set-version">
        <property name="bin.name" value="monsiaj-bin-${version}"/>
        <copy todir="${build.dir}/${bin.name}">
            <fileset dir="${build.dir}">
                <include name="*.jnlp"/>                
                <include name="*.jar"/>
                <exclude name="monsiaj.jar"/>                
            </fileset>
        </copy>
        <copy todir="${build.dir}/${bin.name}/misc">
            <fileset dir="${build.dir}">
                <include name="jma-receipt.jpg"/>                
            </fileset>
        </copy>          
        <copy todir="${build.dir}/${bin.name}/doc">
            <fileset dir="${build.dir}">
                <include name="*.txt"/>
            </fileset>
        </copy>        
        <copy todir="${build.dir}/${bin.name}/theme">
            <fileset dir="${build.dir}">
                <include name="*.theme"/>
            </fileset>
        </copy>
        <!-- ant 1.5.x should use destfile instead of zipfile-->
        <zip zipfile="${dist.dir}/${bin.name}.zip">
            <fileset dir="${build.dir}">
                <include name="${bin.name}/**"/>
            </fileset>
        </zip>
    </target>
    
    <target name="dist-loader" depends="create-jars,copy-files,set-version">
        <property name="loader.name" value="monsiaj-${version}"/>
        <copy todir="${build.dir}/${loader.name}">
            <fileset dir="${build.dir}">           
                <include name="monsiaj.jar"/>             
                <include name="log4j*.jar"/>  
            </fileset>
            <fileset dir="${resources.dir}"> 
                <include name="*.png"/>
                <include name="*.txt"/>
                <include name="*.ico"/>
            </fileset>
        </copy>
        <!-- ant 1.5.x should use destfile instead of zipfile-->
        <zip zipfile="${dist.dir}/${loader.name}.zip">
            <fileset dir="${build.dir}">
                <include name="${loader.name}/**"/>
            </fileset>
        </zip>
    </target>    

    <target name="dist-src" depends="set-version">
        <property name="src.name" value="monsiaj-src-${version}"/>
        <copy todir="${build.dir}/${src.name}">
            <fileset dir=".">
                <include name="src/**/"/>
                <include name="resources/**"/>
                <include name="libs/**"/>
                <include name="build.xml"/>
                <include name="README.txt"/>
                <include name="HOWTOBUILD.txt"/>
                <exclude name="**/CVS"/>
            </fileset>
        </copy>
        <!-- ant 1.5.x should use destfile instead of zipfile-->
        <zip zipfile="${dist.dir}/${src.name}.zip">
            <fileset dir="${build.dir}">
                <include name="${src.name}/**"/>
            </fileset>
        </zip>
    </target>

    <target name="create-jars" depends="create-unsigned-jars,sign-jars"/>

    <target name="create-unsigned-jars" depends="compile,copy-files">
        <jar jarfile="${build.dir}/jmareceipt.jar" manifest="${resources.dir}/jmareceipt.mf">
            <fileset dir="${build.dir}">
                <include name="org/montsuqi/**"/>
                <include name="**/*.png"/>
                <include name="com/sun/pdfview/font/res/cmap/*"/>
                <include name="*.xml"/>
                <exclude name="org/montsuqi/tools/**"/>                
            </fileset>
        </jar>
        <jar jarfile="${build.dir}/monsiaj.jar" manifest="${resources.dir}/monsiaj.mf">
            <fileset dir="${build.dir}">
                <include name="jp/or/med/orca/monsiaj/**"/>
                <include name="*.xml"/>
            </fileset>
        </jar>        
        <jar jarfile="${build.dir}/pandaglade.jar" manifest="${resources.dir}/pandaglade.mf">
            <fileset dir="${build.dir}">
                <include name="org/montsuqi/tools/TestGlade.class"/>
            </fileset>
        </jar>
    </target>

    <target name="sign-jars" depends="create-unsigned-jars" if="do.sign">
        <input message="Input the store password" addproperty="storepass"/>
        <signjar alias="${alias}" tsaurl="${tsa}" storepass="${storepass}" keystore="${keystore}">
            <fileset dir="${build.dir}">
                <include name="*.jar"/>
            </fileset>
        </signjar>
    </target>

    <target name="javadoc" description="Creates Javadoc documents">
        <javadoc
            locale="en"
            packagenames="org.montsuqi.*"
            excludepackagenames="org.montsuqi.certman.*,org.montsuqi.tools.*,org.montsuqi.widgets.Test*"
            sourcepath="${src.dir}"
            source="1.7"
            destdir="${doc.dir}"
            access="package"
            classpathref="project.class.path"/>
    </target>

    <target name="clean" description="Cleans all built files.">
        <delete includeEmptyDirs="true">
            <fileset dir="." defaultexcludes="no">
                <include name="**/*~"/>
                <include name="**/.#*#"/>
                <include name="${build.dir}/**"/>
                <include name="${doc.dir}/**"/>
                <include name="${tmp.dir}/**"/>
                <include name="${dist.dir}/**"/>
                <include name="${report.dir}/**"/>
            </fileset>
        </delete>
    </target>

    <target name="run-tests" depends="compile,copy-files" description="Run all junit test.">
        <junit printsummary="on" fork="false">
            <formatter type="xml"/>
            <classpath refid="project.class.path"/>
            <batchtest todir="${report.dir}">
                <fileset dir="${src.dir}">
                    <include name="**/Test*.java"/>
                    <exclude name="**/TestGlade.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}"/>
        </junitreport>
    </target>

    <target name="single-test" depends="compile,copy-files" description="Run single target junit test." if="testcase">
        <junit printsummary="on" fork="false">
            <formatter type="plain" usefile="false"/>
            <classpath refid="project.class.path"/>
            <test name="${testcase}"/>
        </junit>
    </target>
        
    <target name="pandaclient" depends="compile">
        <java classname="org.montsuqi.client.Launcher">
            <classpath>
                <pathelement path="bin:src" />
                <fileset dir="libs">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>
        
    
    <target name="monsiaj" depends="compile">
        <java classname="jp.or.med.orca.monsiaj.Loader">
            <classpath>
                <pathelement path="bin:src" />
            </classpath>
        </java>
    </target>
        
</project>
